---
title: "Assignment 2: California Fire Hotspots"
author: "Tony Fraser and Mark Gonsalves "
date: "11 FEB 2025"
output:
  html_document:
    toc: true
    number_sections: true
    self_contained: true
python: 
  jupyter: data622
execute:
  warning: false
  message: false
  freeze: auto
---

```{=html}
<style>


<style>
/* Your existing styles */
.quarto-title-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
}

/* Add these new styles for code blocks */
pre > code.sourceCode { 
    white-space: pre; 
    position: relative; 
}

pre > code.sourceCode > span { 
    display: inline-block; 
    line-height: 1.25; 
}

div.sourceCode { 
    margin: 1em 0; 
    background-color: #f8f8f8;  /* Light gray background */
    border: 1px solid #ddd;     /* Light border */
    border-radius: 4px;         /* Rounded corners */
    padding: 1em;               /* Inner spacing */
}

pre.sourceCode { 
    margin: 0; 
}

@media screen {
    div.sourceCode { 
        overflow: auto; 
    }
}

code.sourceCode > span { 
    color: inherit; 
    text-decoration: inherit; 
}

/* Rest of your existing styles */
body {
    width: 900px;
    font-family: Arial, sans-serif;
    margin: 0 auto;
    background-color: white;
}

.quarto-title-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
}

.quarto-title-meta-heading {
    font-weight: bold;
}

.quarto-title-meta-contents {
    margin-right: 20px;
}


/* Flexbox container for title and author */
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px; /* Add space below the header */
}

.header-container h1 {
    margin: 0;
    font-size: 2.5em;
}

.header-container .meta-info {
    text-align: right; /* Align the meta information to the right */
    font-size: 1.2em;
    margin: 0;
}

h2, h3, h4, h5, h6 {
    font-family: Arial, sans-serif;
    margin: 0 0 10px 0; /* Reduce the bottom margin */
    padding: 0; /* Remove padding */
    line-height: 1.2; /* Control the line spacing */
}

/* Adjust table and image styles */
table {
    width: 100%;
    border-collapse: collapse;
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;
    overflow-x: auto;
    display: block;
}

table, th, td {
    border: 1px solid lightgray;
    padding: 8px;
    text-align: left;
}

th {
    background-color: #f2f2f2;
}

/* Custom figure sizing */
.figure {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
}

img {
    max-width: 100%;
    height: auto;
    display: block;
    margin-left: auto;
    margin-right: auto;
}
</style>
```
<a href="https://github.com/tonythor/620-web-analytics" target="_blank" rel="noopener noreferrer">github</a>

## Datasource overview 
- This is the **CAL FIRE Damage Inspection Program (DINS)**  database of structures damaged or destroyed by wildland fires in California **since 2013**, as documented by CAL FIRE and partnering agencies. Structures damaged before 2013 do not have a digital record. Fires in LRA (Local Responsibility Area) or FRA (Federal Responsibility Area) responsibility areas may or may not be included.  
- Starting in 2018, the DINS program began collecting data on all structures (damaged and non-damaged). Before 2018, only damaged/destroyed structures were recorded.
- This database includes structures impacted by wildland fire that are **inside or within 100 meters** of the fire perimeter. Structure type, construction features, and defensible space attributes are determined as accurately as possible, even when the structure is completely destroyed. Some attributes may be missing if they could not be determined.   
- Fire damage and poor access can limit inspections. While all inspections follow a systematic process, some impacted structures may not be identified, leading to a small margin of error.  
- The database contains two address fields:  
  - Field-determined address:Street number, street name, and street type, entered by the inspector based on on-site observations.  
  - Parcel-based address: Address (parcel) and APN (parcel), added througha spatial join after data collection.  

## Datasource statistics
- Rows: 130,717
- Columns: 46
- Update Frequency: Monthly or after a big fire
- Coverage: 2013 to
- Last Update: February 11, 2025, 4:07 PM (UTC-08:00)
- URL: https://data.ca.gov/dataset/cal-fire-damage-inspection-dins-data

## Load and preview 
```{python initial}
import os
import pandas as pd
import numpy as np
import networkx as nx
import pickle
from scipy.spatial import cKDTree
from geopy.distance import geodesic
from data620.helpers.glimpse import glimpse
from data620.helpers.dins_utils import clean_column_names

dins =  pd.read_csv("https://tonyfraser-data.s3.us-east-1.amazonaws.com/calfire/raw/POSTFIRE_MASTER_DATA_SHARE_2064760709534146017.csv")
```

### Preview using glimpse
```{python glimpse}
glimpse(dins)
```

### Preview using df.head()
(you can scroll right)
```{python head}
dins.head()
```

## Set up the graph
Each property is a node, and nodes are connected if they are within 500 meters of each other. Like our actor analogy from class, a highly connected house is one with many nearby houses that were also inspected, potentially indicating a fire-affected area. This network will highlight densely packed neighborhoods rather than truly fire-damaged zones, but letâ€™s see what patterns emerge.

This took a ridiculous amount of time to run, so we cached it in a pickle file.  
```{python build_graph}
class FireDamageGraph:
    """Singleton class for loading, building, and caching a fire damage network graph."""
    CACHE_FILE = "nogit_fire_graph.gpickle"
    INSTANCE = None
    
    def __new__(cls):
        if cls.INSTANCE is None:
            cls.INSTANCE = super(FireDamageGraph, cls).__new__(cls)
            cls.INSTANCE.graph = None
            cls.INSTANCE.df = None
            cls.INSTANCE.get_graph()
        return cls.INSTANCE
    
    def get_graph(self):
        """Loads the graph from cache if available; otherwise, builds and caches it."""
        if os.path.exists(self.CACHE_FILE):
            print("Loading cached graph...")
            with open(self.CACHE_FILE, 'rb') as f:
                self.graph = pickle.load(f)
        else:
            self.build_graph()
        return self.graph
    
    def build_graph(self):
        """Builds the fire damage graph from the dataset and caches it."""
        try:
            print("Building graph from scratch...")
            
            # Load and clean data
            self.df = (
                dins
                .pipe(clean_column_names)
                .assign(
                    latitude=lambda x: x["latitude"].round(6),
                    longitude=lambda x: x["longitude"].round(6)
                )
            )
            print(f"Loaded {len(self.df)} rows of data")

            G = nx.Graph()
            
            print("Creating nodes...")
            node_data = {
                row["object_id"]: {
                    "latitude": row["latitude"],
                    "longitude": row["longitude"],
                    "damage": row["damage"],
                    "structure_type": row["structure_type"],
                    "incident": row["incident_name"]
                }
                for _, row in self.df.iterrows()
            }
            G.add_nodes_from(node_data.items())
            print(f"Added {len(node_data)} nodes")
            
            print("Building KD-tree...")
            coords = np.array([[data["latitude"], data["longitude"]] 
                             for data in node_data.values()])
            tree = cKDTree(coords)
            
            distance_threshold = 500 / 111000
            print("Finding pairs within threshold...")
            pairs = tree.query_pairs(distance_threshold, output_type='ndarray')
            print(f"Found {len(pairs)} pairs within threshold")
            
            print("Adding edges...")
            node_ids = list(node_data.keys())
            edges = [
                (node_ids[i], node_ids[j], 
                 {"weight": geodesic(
                     (coords[i][0], coords[i][1]), 
                     (coords[j][0], coords[j][1])
                 ).meters})
                for i, j in pairs
            ]
            G.add_edges_from(edges)
            print(f"Added {len(edges)} edges")
            
            # Save graph to cache using pickle
            print("Saving graph to cache...")
            with open(self.CACHE_FILE, 'wb') as f:
                pickle.dump(G, f)
            print("Graph saved to cache.")
            
            self.graph = G
            
        except Exception as e:
            print(f"Error building graph: {str(e)}")
            raise
# Create instance
fire_graph = FireDamageGraph()

# Use the stored DataFrame for the centrality calculation
df = fire_graph.df
G = fire_graph.graph

print(f"Graph has {G.number_of_nodes()} nodes and {G.number_of_edges()} edges")
```
## Show the top 30 hotspots 
```{python show_centrality}
degree_centrality = nx.degree_centrality(G)

# Convert to a DataFrame
top_nodes = pd.DataFrame(degree_centrality.items(), columns=["object_id", "centrality"])

# Merge with fire data to get incident name, damage type, and address
top_nodes = top_nodes.merge(
    df[["object_id", "incident_name", "damage", "latitude", "longitude", "site_address"]], 
    on="object_id"
)

# Sort by centrality and show the top 30
top_30 = top_nodes.sort_values(by="centrality", ascending=False).head(30)
top_30
```

